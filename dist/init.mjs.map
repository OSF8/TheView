{"version":3,"file":"init.mjs","mappings":"qKA+BO,MAAMA,EAAuB,IA/BpC,MAOIC,cANU,KAAAC,OAASC,SAASC,KAEpB,KAAAC,IAAMF,SAASG,cAAc,SAE7B,KAAAC,SAAgE,CAAC,EAMzE,KAAAC,UAAY,EAAGC,KAAIC,WAAUC,UACzBC,KAAKL,SAASE,GAAM,CAAEC,WAAUC,OAChCC,KAAKC,YAAL,EAGJ,KAAAA,WAAa,KACT,MAAM,SAAEN,GAAaK,KACrBA,KAAKP,IAAIS,UAAYC,OAAOC,KAAKT,GAC5BU,KAAKC,GAAQ,GAAGX,EAASW,GAAKR,cAAcH,EAASW,GAAKP,UAC1DQ,KAAK,IAFV,EAKJ,KAAAC,OAAUX,IACFG,KAAKL,SAASE,YACPG,KAAKL,SAASE,GACrBG,KAAKC,aACR,EAnBDD,KAAKV,OAAOmB,YAAYT,KAAKP,IAChC,G,ICTOiB,E,WAAZ,SAAYA,GACR,kBACA,kBACA,oBACA,4BAJJ,EAAYA,IAAAA,EAAW,KAOvB,MCJMC,EAAiB,IAAI,IDIT,CACdC,OAAQ,IACRC,OAAQ,IACRC,QAAS,KACT,eAAgB,OERPC,EAAmB,KAC5B,MAAMC,EAAYzB,SAASG,cAAc,OACzCsB,EAAUC,MAAMC,QACZ,iFACJ3B,SAAS4B,KAAKV,YAAYO,GAC1B,MAAMI,EAAgBJ,EAAUK,YAAcL,EAAUM,YAExD,OADA/B,SAAS4B,KAAKI,YAAYP,GACnBI,CAAP,E,mQCPJ,MAAMI,EAAerB,OAAOsB,OAAO,CAC/BC,YAAa,IACbC,YAAa,IACbC,aAAc,IACdC,QAAS,CACLC,OAASC,GAAsBA,EAC/BC,eAAiBD,GACbA,EAAI,GAAM,EAAIA,EAAIA,EAAIA,EAAIA,EAAI,EAAI,IAAMA,EAAIA,EAAIA,EAAIA,KAiGnDE,EAAgB,IAtF7B,cCrBM,MAAN,cACY,KAAAC,aAAgE,CAAC,EAElE,KAAAC,UAAY,CAACtC,EAAYuC,KAC5BpC,KAAKkC,aAAarC,GAAMuC,CAAxB,EAGG,KAAAC,YAAexC,IACdA,GAAMG,KAAKkC,aAAarC,WAAYG,KAAKkC,aAAarC,EAAzB,EAG9B,KAAAyC,KAAO,CAACzC,EAAa0C,KACxBpC,OAAOC,KAAKJ,KAAKkC,cAAcM,SAASlC,IAChCA,IAAQT,GAAIG,KAAKkC,aAAa5B,GAAKiC,EAAvB,GADpB,CAIP,GDMGlD,cACIoD,QAKG,KAAAC,eAAiB,CAACC,EAAsBC,EAA0B,CAAC,KACtE,MAAM,YAAEC,GAAgBC,QAClB,aAAEC,GAAiBxD,SAASyD,iBAC5B,IAAEC,GAAQN,EAAQO,wBAClBC,EAAMN,EAAcI,EAAMF,EAAe,EAC/C/C,KAAKoD,OAAOD,EAAKP,EAAjB,EAGG,KAAAS,oBAAsB,CACzBV,EACAW,EAAS,EACTV,EAA0B,CAAC,KAE3B,MAAM,YAAEC,GAAgBC,QAClB,IAAEG,GAAQN,EAAQO,wBAClBC,EAAMF,EAAMJ,EAAcS,EAC1BC,EAAWC,KAAKC,IAClBD,KAAKE,IAAIF,KAAKG,IAAIpE,SAASyD,gBAAgBY,UAAYT,GAAM3B,EAAaE,aAC1EF,EAAaG,aAEjB3B,KAAKoD,OAAOD,EAAG,GAAII,YAAaX,GAAhC,EAGG,KAAAQ,OAAS,CAACD,EAAM,EAAGP,EAA0B,CAAC,KACjD5C,KAAK6D,cAAcV,EAAKP,EAAxB,EA5BA,MAAMkB,EAAU,IAAS9D,KAAKsC,KAAMd,EAAaI,cACjDkB,OAAOiB,iBAAiB,UAAU,IAAMD,KAAW,CAAEE,SAAS,GACjE,CA6BOH,cAAcI,EAAqBrB,EAA0B,CAAC,GAClE,MAAMsB,EAAiC,CACnCX,SAAU/B,EAAaG,YACvBwC,eAAgB3C,EAAaK,QAAQG,iBAEnC,SAAEuB,EAAF,eAAYY,GAAgB,OAAQD,GAAmBtB,GACvDwB,EAAQtB,OAAOD,YACfwB,EAAY,QAASvB,OAAOwB,YAAcA,YAAYC,OAAQ,IAAIC,MAAOC,UAEzEC,EAAiBlB,KAAKC,IACxBlE,SAAS4B,KAAKwD,aACdpF,SAAS4B,KAAKyD,aACdrF,SAASyD,gBAAgBD,aACzBxD,SAASyD,gBAAgB2B,aACzBpF,SAASyD,gBAAgB4B,cAEvBC,EACF/B,OAAOgC,aACPvF,SAASyD,gBAAgBD,cACzBxD,SAASwF,qBAAqB,QAAQ,GAAGhC,aACvCiC,EAAoBf,EACpBgB,EAA4BzB,KAAK0B,MACnCR,EAAiBM,EAAoBH,EAC/BH,EAAiBG,EACjBG,GAGJ,0BAA2BlC,OAKjC,SAASM,IACL,MAAMmB,EAAM,QAASzB,OAAOwB,YAAcA,YAAYC,OAAQ,IAAIC,MAAOC,UACnEU,EAAO3B,KAAKE,IAAI,GAAIa,EAAMF,GAAcd,GACxC6B,EAAsBjB,EAAkCgB,GAC9DrC,OAAOM,OACH,EACAI,KAAK6B,KAAKD,GAAsBH,EAA4Bb,GAASA,IAGrEZ,KAAK6B,KAAKvC,OAAOD,eAAiBoC,GAItCK,sBAAsBlC,EACzB,CAEDA,GApBIN,OAAOM,OAAO,EAAG6B,EAqBxB,IEnCc,IAxDnB,oBACW,KAAAM,OAASzC,OAAO0C,WAAa,GAE5B,KAAA3F,IAAK,QAAO,IAkBZ,KAAA4F,iBAAmB,KACvBrG,EAAqBQ,UAAU,CAC3BC,GAAIG,KAAKH,GAAK,IACdC,SAAU,QACVC,IAAK,sBAAsB+C,OAAOgC,kBAHtC,EAOI,KAAAY,kBAAoB,KACxBtG,EAAqBQ,UAAU,CAC3BC,GAAIG,KAAKH,GAAK,IACdC,SAAU,QACVC,IAAK,gBAAgBgB,UAHzB,EAOI,KAAA4E,aAAe,KACnB,IAAIC,EAAW9C,OAAOD,YACtBZ,EAAcE,UAAUnC,KAAKH,GAAK,UAAU,KACpC+F,GAAY9C,OAAOD,YACnBtD,SAASyD,gBAAgB6C,UAAUC,IAAI,oBAEvCvG,SAASyD,gBAAgB6C,UAAUrF,OAAO,oBAE1CsC,OAAOgC,YAAchC,OAAOD,YAAc,IAAMtD,SAAS4B,KAAK4B,aAC9DxD,SAASyD,gBAAgB6C,UAAUC,IAAI,kBAEvCvG,SAASyD,gBAAgB6C,UAAUrF,OAAO,kBAG9CoF,EAAW9C,OAAOD,WAAlB,GAZJ,CAeP,CAjDUkD,OACH,YACA/F,KAAK0F,oBACL1F,KAAKgG,iBACLhG,KAAK2F,cACR,CAEOK,iBACJhG,KAAKyF,mBACA3C,OAAOmD,SAASC,KAAKC,MAAM,iBAG5B5G,SAAS4B,KAAK0E,UAAUC,IAAI,UAF5BnF,EAAeyF,kBAAkBpG,KAAKyF,iBAI7C,IC9BDM,M","sources":["webpack://knight-frank-the-view/./src/general/js/dynamic-styles-service.ts","webpack://knight-frank-the-view/./src/config.ts","webpack://knight-frank-the-view/./src/general/js/device-observer.ts","webpack://knight-frank-the-view/./src/general/js/scrollbar-handler.ts","webpack://knight-frank-the-view/./src/general/js/scroll-service.ts","webpack://knight-frank-the-view/./src/general/js/subscribe-service.ts","webpack://knight-frank-the-view/./src/general/js/app.ts","webpack://knight-frank-the-view/./src/init.ts"],"sourcesContent":["class DynamicStylesService {\r\n    protected parent = document.head;\r\n\r\n    private tag = document.createElement('style');\r\n\r\n    private elements: { [id: string]: { selector: string; css: string } } = {};\r\n\r\n    constructor() {\r\n        this.parent.appendChild(this.tag);\r\n    }\r\n\r\n    setStyles = ({ id, selector, css }: { id: string; selector: string; css: string }): void => {\r\n        this.elements[id] = { selector, css };\r\n        this._updateTag();\r\n    };\r\n\r\n    _updateTag = (): void => {\r\n        const { elements } = this;\r\n        this.tag.innerHTML = Object.keys(elements)\r\n            .map((key) => `${elements[key].selector} { ${elements[key].css} }`)\r\n            .join(' ');\r\n    };\r\n\r\n    remove = (id: string): void => {\r\n        if (this.elements[id]) {\r\n            delete this.elements[id];\r\n            this._updateTag();\r\n        }\r\n    };\r\n}\r\n\r\nexport const dynamicStylesService = new DynamicStylesService();\r\n","export enum deviceNames {\r\n    mobile = 'mobile',\r\n    tablet = 'tablet',\r\n    desktop = 'desktop',\r\n    desktopWide = 'desktop-wide',\r\n}\r\n\r\nconst viewports = {\r\n    mobile: 375,\r\n    tablet: 768,\r\n    desktop: 1024,\r\n    'desktop-wide': 1600,\r\n};\r\n\r\nexport { viewports };\r\n","import { DeviceObserver, operators } from '@deleteagency/device-observer/src/index';\r\nimport { viewports } from 'config';\r\n\r\nconst deviceObserver = new DeviceObserver(viewports);\r\n\r\nexport { deviceObserver, operators };\r\n","export const hasScrollBar = () =>\r\n    document.body.scrollHeight > document.documentElement.clientHeight;\r\n\r\nexport const getScrollbarSize = () => {\r\n    const scrollDiv = document.createElement('div');\r\n    scrollDiv.style.cssText =\r\n        'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';\r\n    document.body.appendChild(scrollDiv);\r\n    const scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\r\n    document.body.removeChild(scrollDiv);\r\n    return scrollbarSize;\r\n};\r\n","import throttle from 'lodash/throttle';\r\nimport { SubscribeService } from './subscribe-service';\r\n\r\nconst scrollConfig = Object.freeze({\r\n    maxDuration: 600,\r\n    minDuration: 300,\r\n    throttleTime: 100,\r\n    easings: {\r\n        linear: (t: number): number => t,\r\n        easeInOutQuart: (t: number): number =>\r\n            t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\r\n    },\r\n});\r\n\r\nexport interface IScrollOptions {\r\n    duration?: number;\r\n    easingFunction?: EasingFunction;\r\n}\r\n\r\ntype EasingFunction = (t: number) => number;\r\n\r\nclass ScrollService extends SubscribeService<void> {\r\n    constructor() {\r\n        super();\r\n        const handler = throttle(this.emit, scrollConfig.throttleTime);\r\n        window.addEventListener('scroll', () => handler(), { passive: true });\r\n    }\r\n\r\n    public scrollToCenter = (element: HTMLElement, options: IScrollOptions = {}) => {\r\n        const { pageYOffset } = window;\r\n        const { clientHeight } = document.documentElement;\r\n        const { top } = element.getBoundingClientRect();\r\n        const pos = pageYOffset + top - clientHeight / 2;\r\n        this.scroll(pos, options);\r\n    };\r\n\r\n    public scrollToElementsTop = (\r\n        element: HTMLElement,\r\n        offset = 0,\r\n        options: IScrollOptions = {}\r\n    ) => {\r\n        const { pageYOffset } = window;\r\n        const { top } = element.getBoundingClientRect();\r\n        const pos = top + pageYOffset + offset;\r\n        const duration = Math.max(\r\n            Math.min(Math.abs(document.documentElement.scrollTop - pos), scrollConfig.maxDuration),\r\n            scrollConfig.minDuration\r\n        );\r\n        this.scroll(pos, { duration, ...options });\r\n    };\r\n\r\n    public scroll = (pos = 0, options: IScrollOptions = {}) => {\r\n        this.animateScroll(pos, options);\r\n    };\r\n\r\n    private animateScroll(destination: number, options: IScrollOptions = {}) {\r\n        const defaultOptions: IScrollOptions = {\r\n            duration: scrollConfig.minDuration,\r\n            easingFunction: scrollConfig.easings.easeInOutQuart,\r\n        };\r\n        const { duration, easingFunction } = { ...defaultOptions, ...options };\r\n        const start = window.pageYOffset;\r\n        const startTime = 'now' in window.performance ? performance.now() : new Date().getTime();\r\n\r\n        const documentHeight = Math.max(\r\n            document.body.scrollHeight,\r\n            document.body.offsetHeight,\r\n            document.documentElement.clientHeight,\r\n            document.documentElement.scrollHeight,\r\n            document.documentElement.offsetHeight\r\n        );\r\n        const windowHeight =\r\n            window.innerHeight ||\r\n            document.documentElement.clientHeight ||\r\n            document.getElementsByTagName('body')[0].clientHeight;\r\n        const destinationOffset = destination;\r\n        const destinationOffsetToScroll = Math.round(\r\n            documentHeight - destinationOffset < windowHeight\r\n                ? documentHeight - windowHeight\r\n                : destinationOffset\r\n        );\r\n\r\n        if (!('requestAnimationFrame' in window)) {\r\n            window.scroll(0, destinationOffsetToScroll);\r\n            return;\r\n        }\r\n\r\n        function scroll() {\r\n            const now = 'now' in window.performance ? performance.now() : new Date().getTime();\r\n            const time = Math.min(1, (now - startTime) / (duration as number));\r\n            const timeFunctionResult = (easingFunction as EasingFunction)(time);\r\n            window.scroll(\r\n                0,\r\n                Math.ceil(timeFunctionResult * (destinationOffsetToScroll - start) + start)\r\n            );\r\n\r\n            if (Math.ceil(window.pageYOffset) === destinationOffsetToScroll) {\r\n                return;\r\n            }\r\n\r\n            requestAnimationFrame(scroll);\r\n        }\r\n\r\n        scroll();\r\n    }\r\n}\r\n\r\nexport const scrollService = new ScrollService();\r\n","export class SubscribeService<T> {\r\n    private _subscribers: { [id: string]: (serviceArgument?: T) => void } = {};\r\n\r\n    public subscribe = (id: string, cb: (serviceArgument?: T) => void) => {\r\n        this._subscribers[id] = cb;\r\n    };\r\n\r\n    public unsubscribe = (id: string): void => {\r\n        if (id && this._subscribers[id]) delete this._subscribers[id];\r\n    };\r\n\r\n    public emit = (id?: string, serviceArgument?: T): void => {\r\n        Object.keys(this._subscribers).forEach((key) => {\r\n            if (key !== id) this._subscribers[key](serviceArgument);\r\n        });\r\n    };\r\n}\r\n","import { dcFactory } from '@deleteagency/dc';\r\nimport { nanoid } from 'nanoid';\r\nimport { dynamicStylesService } from 'general/js/dynamic-styles-service';\r\nimport { deviceObserver } from 'general/js/device-observer';\r\nimport { getScrollbarSize } from 'general/js/scrollbar-handler';\r\nimport { scrollService } from 'general/js/scroll-service';\r\n\r\ndeclare global {\r\n    interface Window {\r\n        appConfig: string;\r\n    }\r\n}\r\n\r\nclass App {\r\n    public config = window.appConfig || '';\r\n\r\n    private id = nanoid(10);\r\n\r\n    public init(): void {\r\n        dcFactory.init();\r\n        this._setScrollbarSize();\r\n        this._watchViewport();\r\n        this._watchScroll();\r\n    }\r\n\r\n    private _watchViewport(): void {\r\n        this._setViewportSize();\r\n        if (!window.location.href.match('EPiServer/CMS')) {\r\n            deviceObserver.subscribeOnResize(this._setViewportSize);\r\n        } else {\r\n            document.body.classList.add('in-cms');\r\n        }\r\n    }\r\n\r\n    private _setViewportSize = (): void => {\r\n        dynamicStylesService.setStyles({\r\n            id: this.id + 'v',\r\n            selector: '.body',\r\n            css: `--viewport-height: ${window.innerHeight}px;`,\r\n        });\r\n    };\r\n\r\n    private _setScrollbarSize = (): void => {\r\n        dynamicStylesService.setStyles({\r\n            id: this.id + 's',\r\n            selector: '.body',\r\n            css: `--scrollbar: ${getScrollbarSize()}px;`,\r\n        });\r\n    };\r\n\r\n    private _watchScroll = (): void => {\r\n        let position = window.pageYOffset;\r\n        scrollService.subscribe(this.id + 'scroll', () => {\r\n            if (position <= window.pageYOffset) {\r\n                document.documentElement.classList.add('is-scrolled-down');\r\n            } else {\r\n                document.documentElement.classList.remove('is-scrolled-down');\r\n            }\r\n            if (window.innerHeight + window.pageYOffset + 50 >= document.body.clientHeight) {\r\n                document.documentElement.classList.add('is-end-of-page');\r\n            } else {\r\n                document.documentElement.classList.remove('is-end-of-page');\r\n            }\r\n\r\n            position = window.pageYOffset;\r\n        });\r\n    };\r\n}\r\n\r\nexport const app = new App();\r\n","import { app } from 'general/js/app';\r\n\r\napp.init();\r\n"],"names":["dynamicStylesService","constructor","parent","document","head","tag","createElement","elements","setStyles","id","selector","css","this","_updateTag","innerHTML","Object","keys","map","key","join","remove","appendChild","deviceNames","deviceObserver","mobile","tablet","desktop","getScrollbarSize","scrollDiv","style","cssText","body","scrollbarSize","offsetWidth","clientWidth","removeChild","scrollConfig","freeze","maxDuration","minDuration","throttleTime","easings","linear","t","easeInOutQuart","scrollService","_subscribers","subscribe","cb","unsubscribe","emit","serviceArgument","forEach","super","scrollToCenter","element","options","pageYOffset","window","clientHeight","documentElement","top","getBoundingClientRect","pos","scroll","scrollToElementsTop","offset","duration","Math","max","min","abs","scrollTop","animateScroll","handler","addEventListener","passive","destination","defaultOptions","easingFunction","start","startTime","performance","now","Date","getTime","documentHeight","scrollHeight","offsetHeight","windowHeight","innerHeight","getElementsByTagName","destinationOffset","destinationOffsetToScroll","round","time","timeFunctionResult","ceil","requestAnimationFrame","config","appConfig","_setViewportSize","_setScrollbarSize","_watchScroll","position","classList","add","init","_watchViewport","location","href","match","subscribeOnResize"],"sourceRoot":""}